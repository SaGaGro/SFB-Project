import { query, transaction } from '../config/database.js';
import { createOmiseCharge, getOmiseCharge } from '../utils/omise.js';
import { logActivity } from '../utils/logger.js';

export const createPaymentCharge = async (req, res) => {
  try {
    const { booking_id } = req.body;
    const user_id = req.user.user_id;

    console.log('üîÑ Creating Omise charge for booking:', booking_id);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
    const bookings = await query(
      'SELECT * FROM bookings WHERE booking_id = ? AND user_id = ?',
      [booking_id, user_id]
    );

    if (bookings.length === 0) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£',
      });
    }

    const booking = bookings[0];

    if (booking.status === 'paid') {
      return res.status(400).json({
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
      });
    }

    if (booking.status === 'cancelled') {
      return res.status(400).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
      });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Omise Charge
    const chargeResult = await createOmiseCharge(
      parseFloat(booking.total_price),
      `‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏ó #${booking_id}`,
      {
        booking_id: booking_id,
        user_id: user_id,
      }
    );

    console.log('‚úÖ Omise charge created:', chargeResult.charge_id);

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
    await transaction(async (conn) => {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ payment ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const [existingPayments] = await conn.execute(
        'SELECT payment_id FROM payments WHERE booking_id = ?',
        [booking_id]
      );

      if (existingPayments.length > 0) {
        // Update existing payment
        await conn.execute(
          `UPDATE payments 
           SET omise_charge_id = ?, 
               qr_code = ?, 
               status = 'pending',
               updated_at = NOW()
           WHERE booking_id = ?`,
          [chargeResult.charge_id, chargeResult.scannable_code.image.download_uri, booking_id]
        );
      } else {
        // Insert new payment
        await conn.execute(
          `INSERT INTO payments 
           (booking_id, user_id, amount, method, status, omise_charge_id, qr_code)
           VALUES (?, ?, ?, 'omise', 'pending', ?, ?)`,
          [
            booking_id,
            user_id,
            booking.total_price,
            chargeResult.charge_id,
            chargeResult.scannable_code.image.download_uri,
          ]
        );
      }
    });

    await logActivity(user_id, 'CREATE_OMISE_CHARGE', 'payments', booking_id);

    res.status(201).json({
      success: true,
      message: '‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: {
        booking_id: booking_id,
        charge_id: chargeResult.charge_id,
        amount: booking.total_price,
        qr_code_url: chargeResult.scannable_code.image.download_uri,
        expires_at: chargeResult.charge.expires_at,
      },
    });
  } catch (error) {
    console.error('‚ùå Create payment charge error:', error);
    res.status(500).json({
      success: false,
      message: error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô',
    });
  }
};

export const checkChargeStatus = async (req, res) => {
  try {
    const { charge_id } = req.params;

    console.log('üîç Checking charge status:', charge_id);

    const result = await getOmiseCharge(charge_id);
    const charge = result.charge;

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• payment
    const payments = await query(
      'SELECT * FROM payments WHERE omise_charge_id = ?',
      [charge_id]
    );

    if (payments.length === 0) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô',
      });
    }

    const payment = payments[0];

    res.json({
      success: true,
      data: {
        payment_id: payment.payment_id,
        booking_id: payment.booking_id,
        status: charge.status,
        paid: charge.paid,
        amount: charge.amount / 100,
        omise_status: charge.status,
      },
    });
  } catch (error) {
    console.error('‚ùå Check charge status error:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞',
    });
  }
};

export const handleWebhook = async (req, res) => {
  try {
    const event = req.body;

    console.log('üì• Webhook received:', event.key);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó event
    if (event.key === 'charge.complete') {
      const charge = event.data;

      console.log('üí∞ Charge completed:', charge.id);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ charge ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (charge.paid && charge.status === 'successful') {
        await transaction(async (conn) => {
          // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ payment
          await conn.execute(
            `UPDATE payments 
             SET status = 'paid', 
                 paid_at = NOW(),
                 updated_at = NOW()
             WHERE omise_charge_id = ?`,
            [charge.id]
          );

          // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• payment
          const [payments] = await conn.execute(
            'SELECT booking_id, user_id FROM payments WHERE omise_charge_id = ?',
            [charge.id]
          );

          if (payments.length > 0) {
            const payment = payments[0];

            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
            await conn.execute(
              'UPDATE bookings SET status = "paid" WHERE booking_id = ?',
              [payment.booking_id]
            );

            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ court time slots
            await conn.execute(
              'UPDATE court_time_slots SET status = "booked" WHERE booking_id = ?',
              [payment.booking_id]
            );

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            await conn.execute(
              `INSERT INTO notifications (user_id, title, message, type)
               VALUES (?, ?, ?, ?)`,
              [
                payment.user_id,
                '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
                `‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á #${payment.booking_id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß`,
                'payment',
              ]
            );

            console.log('‚úÖ Payment processed successfully for booking:', payment.booking_id);
          }
        });
      }
    } else if (event.key === 'charge.failed') {
      const charge = event.data;

      console.log('‚ùå Charge failed:', charge.id);

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô failed
      await query(
        `UPDATE payments 
         SET status = 'failed', 
             updated_at = NOW()
         WHERE omise_charge_id = ?`,
        [charge.id]
      );
    }

    // ‡∏™‡πà‡∏á response ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Omise
    res.status(200).json({ received: true });
  } catch (error) {
    console.error('‚ùå Webhook error:', error);
    res.status(500).json({ error: 'Webhook processing failed' });
  }
};