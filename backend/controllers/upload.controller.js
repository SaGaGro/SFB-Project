import { query } from '../config/database.js';
import { deleteFile } from '../config/multer.js';
import { logActivity } from '../utils/logger.js';

// Upload ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á DB ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
export const uploadProfile = async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({
        success: false,
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå'
      });
    }
    
    const imageUrl = `/uploads/profiles/${req.file.filename}`;
    const userId = req.user.user_id;
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Database ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    await query(
      'UPDATE users SET profile_image = ? WHERE user_id = ?',
      [imageUrl, userId]
    );
    
    // Log activity
    await logActivity(userId, 'UPLOAD_PROFILE_IMAGE', 'users', userId);
    
    res.json({
      success: true,
      message: '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: {
        imageUrl: imageUrl,
        fullUrl: `${process.env.BASE_URL || 'http://localhost:3000'}${imageUrl}`
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå',
      error: error.message
    });
  }
};

// Upload ‡∏£‡∏π‡∏õ‡∏™‡∏ô‡∏≤‡∏° (‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ)
export const uploadVenueImages = async (req, res) => {
  try {
    if (!req.files || req.files.length === 0) {
      return res.status(400).json({
        success: false,
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå'
      });
    }
    
    const imageUrls = [];
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    for (const file of req.files) {
      const imageUrl = `/uploads/venues/${file.filename}`;
      imageUrls.push(imageUrl);
    }
    
    // üÜï ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ venueId ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á database ‡∏î‡πâ‡∏ß‡∏¢
    const { venueId } = req.body;
    if (venueId) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ venue ‡∏à‡∏£‡∏¥‡∏á
      const venues = await query(
        'SELECT venue_id FROM venues WHERE venue_id = ?',
        [venueId]
      );
      
      if (venues.length > 0) {
        for (const imageUrl of imageUrls) {
          await query(
            'INSERT INTO venue_images (venue_id, image_url) VALUES (?, ?)',
            [venueId, imageUrl]
          );
        }
        
        // Log activity
        await logActivity(req.user.user_id, 'UPLOAD_VENUE_IMAGES', 'venues', venueId);
      }
    }
    
    res.json({
      success: true,
      message: `‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏™‡∏ô‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${imageUrls.length} ‡∏£‡∏π‡∏õ`,
      data: {
        venueId: venueId || null,
        images: imageUrls,
        count: imageUrls.length
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå',
      error: error.message
    });
  }
};

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô uploadCourtImages (‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 97-145)
export const uploadCourtImages = async (req, res) => {
  try {
    if (!req.files || req.files.length === 0) {
      return res.status(400).json({
        success: false,
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå'
      });
    }
    
    const imageUrls = [];
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    for (const file of req.files) {
      const imageUrl = `/uploads/courts/${file.filename}`;
      imageUrls.push(imageUrl);
    }
    
    // üÜï ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ courtId ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á database ‡∏î‡πâ‡∏ß‡∏¢
    const { courtId } = req.body;
    if (courtId) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ court ‡∏à‡∏£‡∏¥‡∏á
      const courts = await query(
        'SELECT court_id FROM courts WHERE court_id = ?',
        [courtId]
      );
      
      if (courts.length > 0) {
        for (const imageUrl of imageUrls) {
          await query(
            'INSERT INTO court_images (court_id, image_url) VALUES (?, ?)',
            [courtId, imageUrl]
          );
        }
        
        // Log activity
        await logActivity(req.user.user_id, 'UPLOAD_COURT_IMAGES', 'courts', courtId);
      }
    }
    
    res.json({
      success: true,
      message: `‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏Ñ‡∏≠‡∏£‡πå‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${imageUrls.length} ‡∏£‡∏π‡∏õ`,
      data: {
        courtId: courtId || null,
        images: imageUrls,
        count: imageUrls.length
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå',
      error: error.message
    });
  }
};

// Upload ‡∏£‡∏π‡∏õ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ)
export const uploadEquipmentImages = async (req, res) => {
  try {
    if (!req.files || req.files.length === 0) {
      return res.status(400).json({
        success: false,
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå'
      });
    }
    
    const { equipmentId } = req.body;
    
    if (!equipmentId) {
      return res.status(400).json({
        success: false,
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ equipment_id'
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ equipment ‡∏à‡∏£‡∏¥‡∏á
    const equipment = await query(
      'SELECT equipment_id FROM equipment WHERE equipment_id = ?',
      [equipmentId]
    );
    
    if (equipment.length === 0) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£'
      });
    }
    
    const imageUrls = [];
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    for (const file of req.files) {
      const imageUrl = `/uploads/equipment/${file.filename}`;
      
      await query(
        'INSERT INTO equipment_images (equipment_id, image_url) VALUES (?, ?)',
        [equipmentId, imageUrl]
      );
      
      imageUrls.push(imageUrl);
    }
    
    // Log activity
    await logActivity(req.user.user_id, 'UPLOAD_EQUIPMENT_IMAGES', 'equipment', equipmentId);
    
    res.json({
      success: true,
      message: `‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${imageUrls.length} ‡∏£‡∏π‡∏õ`,
      data: {
        equipmentId: equipmentId,
        images: imageUrls,
        count: imageUrls.length
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå',
      error: error.message
    });
  }
};

// ‡∏•‡∏ö‡∏£‡∏π‡∏õ
export const deleteImage = async (req, res) => {
  try {
    const { type, id } = req.params; // type: venue, court, equipment
    
    let tableName, columnName;
    
    switch(type) {
      case 'venue':
        tableName = 'venue_images';
        columnName = 'venue_id';
        break;
      case 'court':
        tableName = 'court_images';
        columnName = 'court_id';
        break;
      case 'equipment':
        tableName = 'equipment_images';
        columnName = 'equipment_id';
        break;
      default:
        return res.status(400).json({
          success: false,
          message: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
        });
    }
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ
    const images = await query(
      `SELECT image_url FROM ${tableName} WHERE image_id = ?`,
      [id]
    );
    
    if (images.length === 0) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û'
      });
    }
    
    // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
    const filePath = `.${images[0].image_url}`;
    deleteFile(filePath);
    
    // ‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await query(`DELETE FROM ${tableName} WHERE image_id = ?`, [id]);
    
    // Log activity
    await logActivity(req.user.user_id, `DELETE_${type.toUpperCase()}_IMAGE`, tableName, id);
    
    res.json({
      success: true,
      message: '‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå',
      error: error.message
    });
  }
};